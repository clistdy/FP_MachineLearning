# -*- coding: utf-8 -*-
"""Untitled3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16KQ-iAlYHOJ9qpHrjHC6Y3d2wCT_phVY
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.tree import DecisionTreeClassifier, plot_tree
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

df = pd.read_csv('Salesdata.csv')
df = df[~df['TransactionNo'].str.startswith('C')]

df['TotalSpent'] = df['Quantity'] * df['Price']
customer_spending = df.groupby('CustomerNo')['TotalSpent'].sum().reset_index()

scaler = StandardScaler()
customer_spending['TotalSpentScaled'] = scaler.fit_transform(customer_spending[['TotalSpent']])

low_spender_threshold = 3000
high_spender_threshold = 15000

def categorize_spending(total_spent):
    if total_spent < low_spender_threshold:
        return 'Low Spender'
    elif total_spent < high_spender_threshold:
        return 'Medium Spender'
    else:
        return 'High Spender'
customer_spending['SpendingCategory'] = customer_spending['TotalSpent'].apply(categorize_spending)

X = customer_spending[['TotalSpentScaled']]
y = customer_spending['SpendingCategory']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

param_grid_tree = {'max_depth': [None, 10, 20, 30], 'min_samples_split': [2, 5, 10]}

grid_tree = GridSearchCV(DecisionTreeClassifier(criterion='entropy', random_state=42), param_grid_tree, cv=10, scoring='accuracy')
grid_tree.fit(X_train_scaled, y_train)

best_tree_entropy = grid_tree.best_estimator_
best_tree_entropy.fit(X_train_scaled, y_train)
y_pred_best_tree = best_tree_entropy.predict(X_test_scaled)

best_metrics = {
    'Best Decision Tree (Entropy)': {
        'Accuracy': accuracy_score(y_test, y_pred_best_tree),
        'Precision (macro)': precision_score(y_test, y_pred_best_tree, average='macro'),
        'Recall (macro)': recall_score(y_test, y_pred_best_tree, average='macro'),
        'F1 Score (macro)': f1_score(y_test, y_pred_best_tree, average='macro'),
    }
}

print(pd.DataFrame(best_metrics).T)

plt.figure(figsize=(12, 8))
plot_tree(best_tree_entropy, feature_names=['TotalSpentScaled'], class_names=best_tree_entropy.classes_, filled=True)
plt.title('Decision Tree for Customer Spending Categories')
plt.show()

# Data Summary
summary = customer_spending.groupby('SpendingCategory')['TotalSpent'].describe()
summary = summary.round(0)
def format_currency(x):
    return f'â‚¬{x:,.0f}'
summary[['mean', 'std', 'min', '25%', '50%', '75%', 'max']] = summary[['mean', 'std', 'min', '25%', '50%', '75%', 'max']].applymap(format_currency)
print(summary)

conf_matrix = confusion_matrix(y_test, y_pred)
# print("\nConfusion Matrix:\n", conf_matrix)

plt.figure(figsize=(8, 6))
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Purples', xticklabels=dt_classifier.classes_, yticklabels=dt_classifier.classes_)
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.title('Confusion Matrix')
plt.show()
